@page "/swiper"
@inject IJSRuntime JsRuntime;
@inject HttpClient hc;


<style>
    .swiper-container {
        width: 800px;
        height: 300px;
        margin: 20px auto;
    }

    .swiper-slide {
        text-align: center;
        font-size: 18px;
        background: #efefef;
        /* Center slide text vertically */
        display: -webkit-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
        width: 600px;
        margin-right: 10px;
    }

    .append-buttons {
        text-align: center;
        margin-top: 20px;
    }
</style>



<h3>Swiper</h3>

<div class="swiper-container">
    <div class="swiper-wrapper">
        <!--by js -->
    </div>

    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>


<!--뒤에 추가-->
<button @onclick="@((args)=>AddItem(args, true))">append</button>
<!--앞에 추가-->
<button @onclick="@((args)=>AddItem(args, false))">prepend</button>



<!--


-->
@code {
    //데이터 목록
    IList<Item> items = new List<Item>();
    static int no = 0;

    /// <summary>
    /// 이 페이지 렌더링 후 호출됨
    /// </summary>
    /// <param name="firstRender">첫번째 렌더링인지 여부</param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //다른 페이지에서 이 페이지로 들어온 처음이면 true. 이 페이지에서 렌더링이 계속된거면 false
        if (firstRender)
        {
            InitJsSwiper();

            //Task<Item> item = LoadDatas();
            //AppendItem(item.Result);
        }
    }


    /// <summary>
    /// swiper 초기화
    /// </summary>
    async void InitJsSwiper()
    {
        await JsRuntime.InvokeVoidAsync("initSwiper");
    }


    /// <summary>
    /// rest api를 이용한 데이터 로드
    /// </summary>
    /// <returns></returns>
    async Task<Item> LoadDatas()
    {
        var dic = await hc.GetFromJsonAsync<Dictionary<string, object>>("https://cat-fact.herokuapp.com/facts/random");

        Item item = new Item()
        {
            No = no++,
            Id = dic["_id"].ToString(),
            User = dic["user"].ToString(),
            Text = dic["text"].ToString(),
            CreatedAt = dic["createdAt"].ToString()
        };

        Console.WriteLine("<<.LoadDatas ${0}", item);
        return item;

    }


    /// <summary>
    /// 데이터를 앞에 추가
    /// </summary>
    /// <param name="item"></param>
    async void AppendItem(Item item)
    {
        items.Add(item);

        //js 함수 호출
        await JsRuntime.InvokeVoidAsync("appendSwiperItem", System.Text.Json.JsonSerializer.Serialize(item).ToString());
    }


    /// <summary>
    /// 데이터를 뒤에 추가
    /// </summary>
    /// <param name="item"></param>
    async void PrependItem(Item item)
    {
        items.Insert(0, item);

        //js 함수 호출
        await JsRuntime.InvokeVoidAsync("prependSwiperItem", System.Text.Json.JsonSerializer.Serialize(item).ToString());

    }


    /// <summary>
    /// js버튼 클릭시 호출됨
    /// </summary>
    /// <param name="e"></param>
    /// <param name="b"></param>
    async void AddItem(MouseEventArgs e, bool b)
    {
        Item item = await LoadDatas();
        if (b)
        {
            AppendItem(item);
        }
        else
        {
            PrependItem(item);
        }

        Console.WriteLine("<<.AddItem");
    }



    public class Item
    {
        public int No { get; set; }
        public string Id { get; set; }
        public string Text { get; set; }
        public string User { get; set; }
        public string CreatedAt { get; set; }
    }
}
