<!-- Modal -->
<div class="modal fade @modalClass" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: @modalDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">신고</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@siren">
                    <label for="reasonCode">사유</label>
                   <InputSelect @bind-Value="siren.ReasonCode" id="reasonCode" class="custom-select" >
                       @foreach(BlazorApp2.Models.DetailCode x in reasonCodes)
                       {
                           <option value="@x.DetailCodeId">@x.DetailCodeNm</option>
                       }
                   </InputSelect>
                </EditForm>
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="()=>Close()">Close</button>
                <button type="button" class="btn btn-primary" @onclick="()=>Save()">저장</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string CubeId { get; set; }

    [Parameter]
    public BlazorApp2.Pages.TravelCube travelCube { get; set; }



    BlazorApp2.Models.Siren siren = new Models.Siren();
    IList<BlazorApp2.Models.DetailCode> reasonCodes = new List<BlazorApp2.Models.DetailCode>();

    string modalClass = "";
    string modalDisplay = "none";

    protected override async Task OnInitializedAsync()
    {
        reasonCodes = await GetReasonCodesAsync();
    }

    protected override void OnParametersSet()
    {
        siren.CubeId = CubeId;
    }

    public void Open()
    {
        modalClass = "show";
        modalDisplay = "block";

        StateHasChanged();
    }

    public void Close()
    {
        modalClass = "";
        modalDisplay = "none";

        StateHasChanged();
    }


    void Save()
    {
        //TODO call http post

        Close();

        travelCube.SirenSaved();
    }



    async Task<IList<BlazorApp2.Models.DetailCode>> GetReasonCodesAsync()
    {
        await Task.Delay(100);

        string[] ids = new string[] { "A", "B", "C" };
        string[] nms = new string[] { "그냥", "19+", "폭력성" };

        IList<BlazorApp2.Models.DetailCode> list = new List<BlazorApp2.Models.DetailCode>();

        for(int i=0; i<ids.Length; i++)
        {
            list.Add(new Models.DetailCode()
            {
                DetailCodeId = ids[i],
                DetailCodeNm = nms[i]
            });
        }

        return list;
    }
}
